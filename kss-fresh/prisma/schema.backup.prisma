// Prisma Schema for KSS Platform

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING") // Neon specific
}

// ============================================
// Authentication Models
// ============================================

enum Role {
  GUEST
  STUDENT
  PREMIUM_STUDENT
  INSTRUCTOR
  ADMIN
}

// User model - NextAuth required fields + custom fields
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String?   // OAuth users may not have password
  name          String?
  image         String?
  role          Role      @default(STUDENT)
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  profile       Profile?
  enrollments   Enrollment[]
  progress      Progress[]
  submissions   Submission[]
  notifications Notification[]
  learningSession LearningSession[]
  
  @@index([email])
  @@index([role])
}

// Account model - For OAuth providers
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@index([userId])
}

// Session model - For managing user sessions
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([sessionToken])
}

// Verification Token - For email verification
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// User Profile - Extended user information
model Profile {
  id                    String   @id @default(cuid())
  userId                String   @unique
  bio                   String?
  phone                 String?
  organization          String?
  location              String?
  learningGoals         String?
  language              String   @default("ko") // Renamed from preferredLang for consistency
  timezone              String   @default("Asia/Seoul")
  theme                 String   @default("light") // light, dark, system
  
  // Notification preferences
  notifications         Boolean  @default(true)
  emailNotifications    Boolean  @default(true)
  pushNotifications     Boolean  @default(false)
  studyReminders        Boolean  @default(false)
  weeklyReports         Boolean  @default(true)
  contentUpdates        Boolean  @default(true)
  systemAlerts          Boolean  @default(true)
  moduleValidation      Boolean  @default(true)
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

// Learning Progress - Track user's learning progress
model Progress {
  id          String   @id @default(cuid())
  userId      String
  moduleId    String
  chapterId   String
  completed   Boolean  @default(false)
  progress    Int      @default(0) // 0-100
  timeSpent   Int      @default(0) // seconds
  lastAccess  DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id])
  
  @@unique([userId, moduleId, chapterId])
  @@index([userId])
  @@index([moduleId])
}

// Course Enrollment
model Enrollment {
  id          String   @id @default(cuid())
  userId      String
  courseId    String
  enrolledAt  DateTime @default(now())
  completedAt DateTime?
  status      String   @default("active") // active, completed, paused
  
  user        User     @relation(fields: [userId], references: [id])
  
  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

// Assignment Submission
model Submission {
  id          String   @id @default(cuid())
  userId      String
  assignmentId String
  content     String
  score       Float?
  feedback    String?
  submittedAt DateTime @default(now())
  gradedAt    DateTime?
  
  user        User     @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([assignmentId])
}

// ============================================
// Stock Market Models
// ============================================

// 주식 종목 정보
model Stock {
  id            String   @id @default(cuid())
  symbol        String   @unique // 종목코드 (005930)
  nameKr        String   // 삼성전자
  nameEn        String?  // Samsung Electronics
  market        String   // KOSPI, KOSDAQ, NYSE, NASDAQ
  sector        String   // 기술, 금융, 헬스케어 등
  marketCap     BigInt?  // 시가총액
  listedShares  BigInt?  // 상장주식수
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  quotes        Quote[]
  financials    Financial[]
  portfolios    PortfolioStock[]
  watchlists    WatchlistStock[]
  
  @@index([market])
  @@index([sector])
  @@index([nameKr])
}

// 실시간 시세 정보
model Quote {
  id            String   @id @default(cuid())
  stockId       String
  stock         Stock    @relation(fields: [stockId], references: [id], onDelete: Cascade)
  
  date          DateTime @default(now())
  open          Float
  high          Float
  low           Float
  close         Float
  volume        BigInt
  
  // 추가 지표
  change        Float    // 전일대비
  changePercent Float    // 전일대비%
  vwap          Float?   // 거래량가중평균가격
  
  @@unique([stockId, date])
  @@index([stockId])
  @@index([date])
}

// 재무제표 정보
model Financial {
  id            String   @id @default(cuid())
  stockId       String
  stock         Stock    @relation(fields: [stockId], references: [id], onDelete: Cascade)
  
  fiscalYear    Int      // 회계연도
  quarter       Int?     // 분기 (1-4, null이면 연간)
  
  // 손익계산서
  revenue       BigInt?  // 매출액
  operatingIncome BigInt? // 영업이익
  netIncome     BigInt?  // 순이익
  
  // 재무상태표
  totalAssets   BigInt?  // 총자산
  totalLiabilities BigInt? // 총부채
  totalEquity   BigInt?  // 자본총계
  
  // 주요 지표
  eps           Float?   // 주당순이익
  per           Float?   // PER
  pbr           Float?   // PBR
  roe           Float?   // ROE
  
  reportedAt    DateTime // 공시일
  createdAt     DateTime @default(now())
  
  @@unique([stockId, fiscalYear, quarter])
  @@index([stockId])
  @@index([fiscalYear])
}

// 포트폴리오
model Portfolio {
  id            String   @id @default(cuid())
  userId        String
  name          String   // 포트폴리오 이름
  type          String   @default("real") // real, simulation
  initialCash   Float    @default(10000000) // 초기 현금
  cash          Float    // 현재 현금
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  stocks        PortfolioStock[]
  transactions  Transaction[]
  
  @@index([userId])
}

// 포트폴리오 보유 종목
model PortfolioStock {
  id            String   @id @default(cuid())
  portfolioId   String
  portfolio     Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  stockId       String
  stock         Stock    @relation(fields: [stockId], references: [id])
  
  quantity      Int      // 보유수량
  avgPrice      Float    // 평균매수가
  currentPrice  Float    // 현재가
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@unique([portfolioId, stockId])
  @@index([portfolioId])
  @@index([stockId])
}

// 거래 내역
model Transaction {
  id            String   @id @default(cuid())
  portfolioId   String
  portfolio     Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  
  type          String   // buy, sell
  symbol        String   // 종목코드
  quantity      Int      // 수량
  price         Float    // 거래가격
  fee           Float    @default(0) // 수수료
  
  executedAt    DateTime @default(now())
  
  @@index([portfolioId])
  @@index([executedAt])
}

// 관심종목
model Watchlist {
  id            String   @id @default(cuid())
  userId        String
  name          String   // 관심종목 그룹명
  
  createdAt     DateTime @default(now())
  
  stocks        WatchlistStock[]
  
  @@index([userId])
}

// 관심종목 상세
model WatchlistStock {
  id            String   @id @default(cuid())
  watchlistId   String
  watchlist     Watchlist @relation(fields: [watchlistId], references: [id], onDelete: Cascade)
  stockId       String
  stock         Stock    @relation(fields: [stockId], references: [id])
  
  targetPrice   Float?   // 목표가
  stopLoss      Float?   // 손절가
  memo          String?  // 메모
  
  addedAt       DateTime @default(now())
  
  @@unique([watchlistId, stockId])
  @@index([watchlistId])
  @@index([stockId])
}

// 시장 지수
model MarketIndex {
  id            String   @id @default(cuid())
  symbol        String   @unique // KOSPI, KOSDAQ, DJI, IXIC
  name          String   // 코스피, 코스닥, 다우존스, 나스닥
  value         Float    // 현재값
  change        Float    // 전일대비
  changePercent Float    // 전일대비%
  
  updatedAt     DateTime @updatedAt
  
  @@index([symbol])
}

// ============================================
// Existing Models (News Analysis)
// ============================================

// 뉴스 캐시
model NewsCache {
  id               String   @id @default(cuid())
  query            String   @unique // 검색 쿼리 (캐시 키)
  data             Json     // 뉴스 데이터 + 분석 결과
  priority         String   @default("medium") // high, medium, low
  updateFrequency  Int      // 업데이트 주기 (분)
  hitCount         Int      @default(0) // 조회수
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@index([query])
  @@index([updatedAt])
}

// 온톨로지 관계
model CompanyRelation {
  id          String   @id @default(cuid())
  companyA    String   // 기업 A
  companyB    String   // 기업 B
  relationType String  // supplier, competitor, partner
  strength    Float    // 관계 강도 (0-1)
  newsCount   Int      // 언급된 뉴스 수
  sentiment   Float    // 평균 감성 점수
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([companyA, companyB, relationType])
  @@index([companyA])
  @@index([companyB])
}

// 기업 영향도
model CompanyImpact {
  id          String   @id @default(cuid())
  company     String   
  ticker      String?
  date        DateTime @default(now())
  directImpact Float   // 직접 영향도
  indirectImpact Float // 간접 영향도
  sectorImpact Float   // 섹터 영향도
  newsCount   Int      // 관련 뉴스 수
  sentiment   Float    // 평균 감성
  keywords    Json     // 주요 키워드 리스트
  
  @@unique([company, date])
  @@index([company])
  @@index([date])
}

// API 호출 로그 (비용 관리)
model ApiCallLog {
  id        String   @id @default(cuid())
  endpoint  String   // newsapi, openai, etc
  query     String?
  cost      Float?   // 예상 비용
  status    String   // success, error
  response  Json?    // 응답 데이터
  createdAt DateTime @default(now())
  
  @@index([endpoint])
  @@index([createdAt])
}

// 사용자 검색 기록
model SearchHistory {
  id        String   @id @default(cuid())
  userId    String?  // 옵션: 사용자 ID
  query     String
  results   Int      // 결과 수
  createdAt DateTime @default(now())
  
  @@index([query])
  @@index([createdAt])
}

// 트렌딩 키워드
model TrendingKeyword {
  id         String   @id @default(cuid())
  keyword    String   @unique
  searchCount Int     @default(1)
  lastSeen   DateTime @default(now())
  category   String?  // 섹터/카테고리
  
  @@index([searchCount])
  @@index([lastSeen])
}

// ============================================
// Notification System Models
// ============================================

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  CONTENT_UPDATE
  SYSTEM_ALERT
  MODULE_VALIDATION
  STUDY_REMINDER
}

enum NotificationStatus {
  PENDING
  SENT
  READ
  DISMISSED
  EXPIRED
}

// Notification model - Store all user notifications
model Notification {
  id          String             @id @default(cuid())
  userId      String
  type        NotificationType   @default(INFO)
  status      NotificationStatus @default(PENDING)
  title       String
  message     String
  moduleId    String?            // Optional: related to specific module
  chapterId   String?            // Optional: related to specific chapter
  actionUrl   String?            // Optional: URL to redirect when clicked
  metadata    Json?              // Optional: additional data (confidence, source, etc.)
  priority    String             @default("medium") // low, medium, high, critical
  
  // Timing
  createdAt   DateTime           @default(now())
  scheduledAt DateTime?          // For scheduled notifications
  sentAt      DateTime?          // When notification was sent
  readAt      DateTime?          // When user read the notification
  expiresAt   DateTime?          // When notification expires
  
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([status])
  @@index([type])
  @@index([createdAt])
  @@index([moduleId])
}

// Learning Session model - Track detailed learning sessions
model LearningSession {
  id               String   @id @default(cuid())
  userId           String
  moduleId         String
  chapterId        String
  sessionId        String   // Generated session ID for tracking
  
  // Session timing
  startTime        DateTime @default(now())
  endTime          DateTime?
  duration         Int      @default(0) // in seconds
  
  // User interactions
  scrollDepth      Int      @default(0) // 0-100 percentage
  interactionCount Int      @default(0)
  simulatorUsed    Boolean  @default(false)
  bookmarkToggled  Boolean  @default(false)
  
  // Content version tracking
  contentVersion   String?  // Track which version of content was viewed
  lastScrollPosition Int    @default(0)
  
  // Session metadata
  deviceType       String?  // mobile, desktop, tablet
  browserInfo      String?  // browser and version
  referrer         String?  // how user arrived at content
  exitReason       String?  // how session ended
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([moduleId])
  @@index([chapterId])
  @@index([sessionId])
  @@index([startTime])
}

// Content Update Log model - Track all content updates for notification purposes
model ContentUpdate {
  id            String   @id @default(cuid())
  moduleId      String
  chapterId     String?  // null for module-wide updates
  updateType    String   // content, simulator, reference, example, bug_fix
  title         String
  description   String
  previousVersion String?
  currentVersion  String
  
  // Update source and confidence
  source        String?  // GPT-5, Claude, manual, user_feedback
  confidence    Int?     // 0-100 confidence score for AI-generated updates
  validationStatus String @default("pending") // pending, validated, rejected
  
  // Impact assessment
  severity      String   @default("medium") // low, medium, high, breaking
  affectedUsers Int      @default(0) // count of users who viewed old version
  
  // Notification tracking
  notificationsSent Boolean @default(false)
  notifiedUsers     Int     @default(0)
  
  createdAt     DateTime @default(now())
  appliedAt     DateTime? // When update was actually applied
  
  @@index([moduleId])
  @@index([chapterId])
  @@index([createdAt])
  @@index([updateType])
  @@index([validationStatus])
}

// Chapter Version model - Track content versions for change detection
model ChapterVersion {
  id          String   @id @default(cuid())
  moduleId    String
  chapterId   String
  version     String   // semantic version like "1.2.3" 
  contentHash String   // hash of content for change detection
  changelog   String?  // description of changes
  
  // Metadata
  wordCount   Int?
  readingTime Int?     // estimated reading time in minutes
  simulatorCount Int   @default(0)
  
  createdAt   DateTime @default(now())
  publishedAt DateTime?
  deprecatedAt DateTime?
  
  @@unique([moduleId, chapterId, version])
  @@index([moduleId])
  @@index([chapterId])
  @@index([createdAt])
}