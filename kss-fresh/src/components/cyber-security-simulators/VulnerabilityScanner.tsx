import React, { useState } from 'react';
import { Search, AlertTriangle, CheckCircle2, XCircle, Shield } from 'lucide-react';
import SimulatorNav from './SimulatorNav';

interface Vulnerability {
  id: string;
  severity: 'Critical' | 'High' | 'Medium' | 'Low';
  title: string;
  description: string;
  cvss: number;
  cve?: string;
}

export default function VulnerabilityScanner() {
  const [targetUrl, setTargetUrl] = useState<string>('https://example.com');
  const [isScanning, setIsScanning] = useState<boolean>(false);
  const [scanProgress, setScanProgress] = useState<number>(0);
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([]);
  const [scanComplete, setScanComplete] = useState<boolean>(false);

  const mockVulnerabilities: Vulnerability[] = [
    {
      id: '1',
      severity: 'Critical',
      title: 'SQL Injection',
      description: '로그인 폼에서 SQL 인젝션 취약점 발견',
      cvss: 9.8,
      cve: 'CVE-2023-1234',
    },
    {
      id: '2',
      severity: 'High',
      title: 'Cross-Site Scripting (XSS)',
      description: '검색 파라미터에서 Reflected XSS 취약점',
      cvss: 7.5,
      cve: 'CVE-2023-5678',
    },
    {
      id: '3',
      severity: 'High',
      title: 'Weak SSL/TLS Configuration',
      description: 'TLS 1.0/1.1 프로토콜 활성화 (권장: TLS 1.2+)',
      cvss: 7.4,
    },
    {
      id: '4',
      severity: 'Medium',
      title: 'Missing Security Headers',
      description: 'X-Frame-Options, CSP 헤더 누락',
      cvss: 5.3,
    },
    {
      id: '5',
      severity: 'Medium',
      title: 'Directory Listing Enabled',
      description: '/uploads/ 디렉토리 리스팅 활성화',
      cvss: 5.0,
    },
    {
      id: '6',
      severity: 'Low',
      title: 'Outdated Server Version',
      description: 'Apache 2.4.29 (최신: 2.4.58)',
      cvss: 3.7,
    },
  ];

  const startScan = () => {
    setIsScanning(true);
    setScanProgress(0);
    setVulnerabilities([]);
    setScanComplete(false);

    // Simulate scanning progress
    const interval = setInterval(() => {
      setScanProgress((prev) => {
        if (prev >= 100) {
          clearInterval(interval);
          setIsScanning(false);
          setScanComplete(true);
          setVulnerabilities(mockVulnerabilities);
          return 100;
        }
        return prev + 5;
      });
    }, 200);
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'Critical':
        return 'bg-red-900/50 border-red-500 text-red-200';
      case 'High':
        return 'bg-orange-900/50 border-orange-500 text-orange-200';
      case 'Medium':
        return 'bg-yellow-900/50 border-yellow-500 text-yellow-200';
      case 'Low':
        return 'bg-blue-900/50 border-blue-500 text-blue-200';
      default:
        return 'bg-gray-900/50 border-gray-500 text-gray-200';
    }
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case 'Critical':
      case 'High':
        return <XCircle className="w-5 h-5" />;
      case 'Medium':
        return <AlertTriangle className="w-5 h-5" />;
      case 'Low':
        return <Shield className="w-5 h-5" />;
      default:
        return null;
    }
  };

  const stats = {
    critical: vulnerabilities.filter((v) => v.severity === 'Critical').length,
    high: vulnerabilities.filter((v) => v.severity === 'High').length,
    medium: vulnerabilities.filter((v) => v.severity === 'Medium').length,
    low: vulnerabilities.filter((v) => v.severity === 'Low').length,
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-slate-900 to-gray-900 text-white">
      <div className="max-w-7xl mx-auto px-4 py-8">
        <SimulatorNav />
        <div className="mb-8">
          <h1 className="text-4xl font-bold mb-4 flex items-center gap-3">
            <Search className="w-10 h-10 text-purple-500" />
            Vulnerability Scanner
          </h1>
          <p className="text-xl text-gray-300">웹 애플리케이션 보안 취약점 자동 스캐너</p>
        </div>

        {/* Scan Input */}
        <div className="bg-gray-800 rounded-xl p-6 mb-6">
          <h2 className="text-xl font-bold mb-4">스캔 대상</h2>
          <div className="flex gap-4">
            <input
              type="text"
              value={targetUrl}
              onChange={(e) => setTargetUrl(e.target.value)}
              placeholder="https://example.com"
              className="flex-1 bg-gray-900 border border-gray-700 rounded-lg px-4 py-3 text-white focus:outline-none focus:border-purple-500"
              disabled={isScanning}
            />
            <button
              onClick={startScan}
              disabled={isScanning}
              className="bg-purple-600 hover:bg-purple-700 disabled:bg-gray-600 disabled:cursor-not-allowed px-8 py-3 rounded-lg font-semibold transition-all flex items-center gap-2"
            >
              <Search className="w-5 h-5" />
              {isScanning ? '스캔 중...' : '스캔 시작'}
            </button>
          </div>

          {isScanning && (
            <div className="mt-4">
              <div className="flex justify-between text-sm mb-2">
                <span>스캔 진행률</span>
                <span>{scanProgress}%</span>
              </div>
              <div className="w-full bg-gray-700 rounded-full h-3 overflow-hidden">
                <div
                  className="bg-gradient-to-r from-purple-500 to-pink-500 h-full transition-all duration-300"
                  style={{ width: `${scanProgress}%` }}
                />
              </div>
            </div>
          )}
        </div>

        {/* Statistics */}
        {scanComplete && (
          <div className="grid md:grid-cols-4 gap-4 mb-6">
            <div className="bg-red-900/30 border-2 border-red-500 rounded-xl p-4">
              <div className="text-3xl font-bold text-red-400">{stats.critical}</div>
              <div className="text-sm text-gray-300">Critical</div>
            </div>
            <div className="bg-orange-900/30 border-2 border-orange-500 rounded-xl p-4">
              <div className="text-3xl font-bold text-orange-400">{stats.high}</div>
              <div className="text-sm text-gray-300">High</div>
            </div>
            <div className="bg-yellow-900/30 border-2 border-yellow-500 rounded-xl p-4">
              <div className="text-3xl font-bold text-yellow-400">{stats.medium}</div>
              <div className="text-sm text-gray-300">Medium</div>
            </div>
            <div className="bg-blue-900/30 border-2 border-blue-500 rounded-xl p-4">
              <div className="text-3xl font-bold text-blue-400">{stats.low}</div>
              <div className="text-sm text-gray-300">Low</div>
            </div>
          </div>
        )}

        {/* Vulnerabilities List */}
        {scanComplete && (
          <div className="bg-gray-800 rounded-xl p-6">
            <h2 className="text-2xl font-bold mb-6 flex items-center gap-2">
              <AlertTriangle className="w-7 h-7 text-yellow-500" />
              발견된 취약점 ({vulnerabilities.length})
            </h2>
            <div className="space-y-4">
              {vulnerabilities.map((vuln) => (
                <div
                  key={vuln.id}
                  className={`border-2 rounded-lg p-4 ${getSeverityColor(vuln.severity)}`}
                >
                  <div className="flex items-start justify-between mb-2">
                    <div className="flex items-center gap-3">
                      {getSeverityIcon(vuln.severity)}
                      <div>
                        <h3 className="font-bold text-lg">{vuln.title}</h3>
                        {vuln.cve && (
                          <span className="text-xs bg-gray-900/50 px-2 py-1 rounded mt-1 inline-block">
                            {vuln.cve}
                          </span>
                        )}
                      </div>
                    </div>
                    <div className="text-right">
                      <div className="text-xs text-gray-400">CVSS Score</div>
                      <div className="text-2xl font-bold">{vuln.cvss}</div>
                    </div>
                  </div>
                  <p className="text-sm mt-2">{vuln.description}</p>
                  <div className="mt-3 pt-3 border-t border-gray-700 flex gap-2">
                    <button className="text-xs bg-blue-600 hover:bg-blue-700 px-3 py-1 rounded transition-all">
                      상세 정보
                    </button>
                    <button className="text-xs bg-green-600 hover:bg-green-700 px-3 py-1 rounded transition-all flex items-center gap-1">
                      <CheckCircle2 className="w-3 h-3" />
                      수정 가이드
                    </button>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {!scanComplete && !isScanning && (
          <div className="bg-gray-800 rounded-xl p-12 text-center">
            <Search className="w-16 h-16 text-gray-600 mx-auto mb-4" />
            <p className="text-gray-400 text-lg">스캔할 대상 URL을 입력하고 시작 버튼을 클릭하세요</p>
          </div>
        )}
      </div>
    </div>
  );
}
